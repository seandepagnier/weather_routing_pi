#!/usr/bin/env bash

#
# Upload the .tar.gz and .xml artifacts to cloudsmith
#
# Builds are uploaded to one of PROD, BETA or ALPHA repositories
# The repository depends on the branch and use of tag to determine which repo.
# ALPHA: Non-master branch no tag
# BETA: Non-master branch with annotated tag
# BETA: Master branch no tag
# PROD: Master branch with annotated tag
#
# If this script is used on CIRCLECI, TRAVIS or APPVEYOR it will upload the correct files to the chosen repository
# If this script is used locally it will build the correct artifacts but will not do the upload
#

set -xe

PROD_REPO=${CLOUDSMITH_PROD_REPO:-'@CLOUDSMITH_USER@/@CLOUDSMITH_BASE_REPOSITORY@-@PROD@'}
BETA_REPO=${CLOUDSMITH_BETA_REPO:-'@CLOUDSMITH_USER@/@CLOUDSMITH_BASE_REPOSITORY@-@BETA@'}
ALPHA_REPO=${CLOUDSMITH_ALPHA_REPO:-'@CLOUDSMITH_USER@/@CLOUDSMITH_BASE_REPOSITORY@-@ALPHA@'}

LOCAL_BUILD=false

if [ "$CIRCLECI" ]; then
    BUILD_ID=${CIRCLE_BUILD_NUM:-1}
    BUILD_DIR=$HOME/project/build
    BUILD_BRANCH=$CIRCLE_BRANCH
    BUILD_TAG=$CIRCLE_TAG
    PKG_EXT=${CLOUDSMITH_PKG_EXT:-'deb'}
elif [ "$TRAVIS" ]; then
    BUILD_ID=${TRAVIS_BUILD_NUM:-1}
    BUILD_DIR=$TRAVIS_BUILD_DIR/build
    BUILD_BRANCH=$TRAVIS_BRANCH
    BUILD_TAG=$TRAVIS_TAG
    if [ "$BUILD_BRANCH" = "$BUILD_TAG" ]; then
        # Travis makes BUILD_BRANCH = BUILD_TAG so make BUILD_BRANCH ""
        BUILD_BRANCH=""
    fi
    PKG_EXT=${CLOUDSMITH_PKG_EXT:-'deb'}
elif [ "$APPVEYOR" ]; then
    BUILD_ID=${APPVEYOR_BUILD_NUMBER:-1}
    BUILD_DIR=$(pwd)
    BUILD_BRANCH=$APPVEYOR_REPO_BRANCH
    BUILD_TAG=$APPVEYOR_REPO_TAG_NAME
    PKG_EXT=${CLOUDSMITH_PKG_EXT:-'exe'}
else
    BUILD_ID=${CIRCLE_BUILD_NUM:-1}
    BUILD_DIR=.
    BUILD_BRANCH=$CIRCLE_BRANCH
    BUILD_TAG=$CIRCLE_TAG
    PKG_EXT=${CLOUDSMITH_PKG_EXT:-'deb'}
    LOCAL_BUILD=true
fi

set +x
if [ -z "$CLOUDSMITH_API_KEY" ] && [ "$LOCAL_BUILD" = "false" ]; then
    echo 'Cannot deploy to cloudsmith, missing $CLOUDSMITH_API_KEY'
    exit 0
fi
set -x

if [ "$CIRCLECI" ] || [ "$TRAVIS" ]; then
    if [ "$DEPLOY_USE_ORB" != "true" ]; then
        if pyenv versions 2>&1 >/dev/null; then
          pyenv versions
          if ! pyenv global 3.11.3 2>&1 >/dev/null; then
            if ! pyenv global 3.9.1 2>&1 >/dev/null; then
              if ! pyenv global 3.8.6 2>&1 >/dev/null; then
                if ! pyenv global 3.7.1 2>&1 >/dev/null; then
                  if ! pyenv global 3.7.0 2>&1>/dev/null; then
                    if ! pyenv global 3.5.2 2>&1>/dev/null; then
                      sudo apt install software-properties-common
                      sudo apt update
                      sudo apt install -y python3.8 python3-pip
                      sudo rm /usr/bin/python3
                      sudo ln -s /usr/bin/python3.8 /usr/bin/python3
                    fi
                  fi
                fi
              fi
            fi
          fi
          python3 --version
          sudo python3 -m pip install cloudsmith-cli
          pyenv rehash
        elif test -d $HOME/cs-venv; then
            source $HOME/cs-venv/bin/activate
            python -m pip install cloudsmith-cli
        elif dnf --version 2>&1 >/dev/null; then
            sudo dnf -y install python3-pip python3-setuptools
            sudo python3 -m pip install -q cloudsmith-cli
        elif apt-get --version 2>&1 >/dev/null; then
            COUNTER=0
            sudo apt install software-properties-common
            sudo apt update
            sudo apt install -y python3.8
            sudo rm /usr/bin/python3
            sudo ln -s /usr/bin/python3.8 /usr/bin/python3
            until
                sudo apt-get install python3-pip python3-setuptools
            do
                if [ "$COUNTER" -gt  "20" ]; then
                    exit -1
                fi
                sleep 5
                ((COUNTER++))
            done
            sudo python3 -m pip install --upgrade pip
            sudo python3 -m pip install -q cloudsmith-cli
        fi
    fi
fi

commit=$(git rev-parse --short=7 HEAD) || commit="unknown"
tag=$(git tag --contains HEAD)

ls -la
pwd
xml=$(ls $BUILD_DIR/*.xml)
cat $xml
tarball=$(ls $BUILD_DIR/*.tar.gz)
tarball_basename=${tarball##*/}
echo $tarball
echo $tarball_basename

source $BUILD_DIR/pkg_version.sh
if [ -n "${OCPN_TARGET}" ]; then
    tarball_name=@PACKAGE_NAME@-@PACKAGE_VERSION@-${PKG_TARGET}-@COMPOUND_ARCH_DASH@@PKG_TARGET_WX_VER@@PKG_BUILD_GTK@-${PKG_TARGET_VERSION}-${OCPN_TARGET}-tarball
else
    tarball_name=@PACKAGE_NAME@-@PACKAGE_VERSION@-${PKG_TARGET}-@COMPOUND_ARCH_DASH@@PKG_TARGET_WX_VER@@PKG_BUILD_GTK@-${PKG_TARGET_VERSION}-tarball
fi

if [ "$(ls $BUILD_DIR/*.${PKG_EXT})" ]; then
    pkg=$(ls $BUILD_DIR/*.${PKG_EXT})
else
    pkg=""
fi

echo $BUILD_BRANCH
echo $BUILD_TAG
echo ${#BUILD_TAG}
if [ "$BUILD_TAG" = "" ] && [ "$tag" != "" ]; then
    BUILD_TAG=$tag
    echo "Build tag: $BUILD_TAG"
fi
if [ "$BUILD_BRANCH" = "" ]; then
    build_commit=$(git show -s --format=%d $BUILD_TAG)
    is_master=$(echo $build_commit | awk '/\/master/ {print}')
    if [ "$is_master" != "" ] || [ "$TRAVIS" ]; then
        BUILD_BRANCH="master"
    fi
fi

BUILD_BRANCH_LOWER=`echo $BUILD_BRANCH | tr '[A-Z]' '[a-z]'`
if [ "$BUILD_BRANCH_LOWER" = "master" ]; then
    echo "In master branch "
    if [ -n "$BUILD_TAG"  ]; then
        echo "building with tag"
        VERSION=$BUILD_TAG
        REPO="$PROD_REPO"
    else
        VERSION="@PROJECT_VERSION@+${BUILD_ID}.${commit}"
        echo "building without tag"
        REPO="$BETA_REPO"
    fi
else
    echo "In non master branch " $BUILD_BRANCH
    if [ -n "$BUILD_TAG" ]; then
        echo "building with tag"
        VERSION=$BUILD_TAG
        REPO="$BETA_REPO"
    else
        echo "building without tag"
        VERSION="@PROJECT_VERSION@+${BUILD_ID}.${commit}"
        REPO="$ALPHA_REPO"
    fi
fi
echo $VERSION
echo $REPO

if [ "$APPVEYOR" ] || [ $LOCAL_BUILD=true ]; then
    echo 'substituting xml file variables for windows build'
    while read line; do
        line=${line//--pkg_repo--/$REPO}
        line=${line//--name--/$tarball_name}
        line=${line//--version--/$VERSION}
        line=${line//--filename--/$tarball_basename}
        echo $line
    done < "$xml" > xml.tmp && cat xml.tmp && cp xml.tmp $xml && rm xml.tmp
else
    echo 'substituting xml file variables for non-windows build'
    sudo sed -i -e "s|--pkg_repo--|$REPO|"  $xml
    sudo sed -i -e "s|--name--|$tarball_name|" $xml
    sudo sed -i -e "s|--version--|$VERSION|" $xml
    sudo sed -i -e "s|--filename--|$tarball_basename|" $xml
fi

cat $xml
ls -l $BUILD_DIR
cur_dir=$(pwd)
gunzip -f $tarball
cd "$BUILD_DIR"
rm -f metadata.xml
tarball_tar=$(ls *.tar)
xml_here=$(ls *.xml)
cp -f $xml_here metadata.xml
if [ "$TRAVIS" ] || [ "$CIRCLECI" ] || [ ! -z ${LOCAL_DEPLOY+x} ]; then
    mkdir build_tar
    cp $tarball_tar build_tar/.
    cd build_tar
    tar -xf $tarball_tar
    rm *.tar
    rm -rf root
    cp ../metadata.xml .
    tar -cf build_tarfile.tar *
    tar -tf build_tarfile.tar
    rm ../$tarball_tar
    cp build_tarfile.tar ../$tarball_tar
    cd ..
    rm -rf build_tar
else
    tar -rf $tarball_tar metadata.xml
fi
tar -tf $tarball_tar
gzip -f $tarball_tar
pwd
cd "$cur_dir"
pwd
ls -la
ls -la ~/.

# Find if file exists in directory
function have_any() {
    [ $# -gt 0 ]
}

if [ ! -z ${LOCAL_DEPLOY+x} ]; then
    if [ -d "/home/circleci/circleci-output" ]; then
        sudo cp build/*.gz ~/circleci-output
        if have_any ./build/*.deb; then
            sudo cp ./build/*.deb ~/circleci-output
        elif have_any ./build/*.exe; then
            sudo cp ./build/*.exe ~/circleci-output
        fi
    else
        echo "Directory ~/circleci-output not found"
    fi
elif [ $LOCAL_BUILD = false ]; then
# Only upload if the owner did the pull request. Non-owners probably don't have security to upload to the cloudsmith repository
    if [ "$CIRCLE_PROJECT_USERNAME" = "$CIRCLE_USERNAME" ]; then
        cloudsmith push raw --republish --no-wait-for-sync \
            --name @PACKAGE_NAME@-@PACKAGE_VERSION@-@PKG_TARGET@-@COMPOUND_ARCH_DASH@@PKG_TARGET_WX_VER@@PKG_BUILD_GTK@-@PKG_TARGET_VERSION@-${OCPN_TARGET}-metadata \
            --version ${VERSION} \
            --summary "@PACKAGE@ opencpn plugin metadata for automatic installation" \
            $REPO $xml

        cloudsmith push raw --republish --no-wait-for-sync \
            --name $tarball_name \
            --version ${VERSION} \
            --summary "@PACKAGE@ opencpn plugin tarball for automatic installation" \
            $REPO $tarball

        if [ "${PKG_EXT}" != "gz" ] && [ "$pkg" != "" ]; then
            cloudsmith push raw --republish --no-wait-for-sync \
                --name opencpn-package-@PACKAGE@-@PACKAGE_VERSION@-@PKG_TARGET@-@COMPOUND_ARCH_DASH@@PKG_TARGET_WX_VER@@PKG_BUILD_GTK@-@PKG_TARGET_VERSION@-${OCPN_TARGET}.${PKG_EXT} \
                --version ${VERSION} \
                --summary "@PACKAGE@ .${PKG_EXT} installation package" \
                $REPO $pkg
        fi
    fi
fi
